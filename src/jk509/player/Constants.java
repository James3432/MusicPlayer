package jk509.player;

public interface Constants {

	/* 
	 * Things we might want to tweak (for research)
	 */
	
	// Learning - most values 0 <= v <= 1
	public static final double LEARNING_RATE = 0.8;                    // Learning Rate
	public static final double DISCOUNT_FACTOR = 0.8;                  // Discount Factor
	public static final boolean PROBABILITIES_INITIALLY_SPREAD = true; // If true, P matrix initialised with all values = 1/size. If false, initialised to Identity
	public static final int HISTORY_SIZE = 20;
	// Rewards:
	public static final double REWARD_TRACK_FINISHED = 0.6;            // track played all way through
	public static final double REWARD_TRACK_SKIPPED_MIN = -0.6;        // track skipped straight away
	public static final double REWARD_TRACK_SKIPPED_MAX = 0.6;         // track barely skipped
	public static final double REWARD_TRACK_CHOSEN_MIN = 0.0;          // track changed straight away
	public static final double REWARD_TRACK_CHOSEN_MAX = 0.8;          // track changed after full play
	public static final double REWARD_TRACK_PLAYLIST = 0.4;            // tracks share a playlist
	public static final double REWARD_TRACK_PLAYLIST_ADJ = 0.8;        // tracks adajcent in playlist
	
	// Clustering
	public static final int MAX_CLUSTER_SIZE = 10;  // DEFAULT: 100  redundant??
	public static final int MAX_CLUSTERS = 10;      // DEFAULT: 100
	public static final int KMEANS_SEED = 10;        // seed value for k-means algorithm
	
	// Feature extraction
	public static final int SAMPLING_RATE = 16;      // kHz
	public static final int ENCODE_BITRATE = 128;    // kbps
	public static final int WINDOW_SIZE = 512;       // window size
	public static final double WINDOW_OVERLAP = 0.0; // window overlap
	public static final boolean NORMALISE_FEATURES = false; // whether to normalise features myself. NOT IMPLEMENTED
	public static final boolean NORMALISE_AUDIO = false;    // whether to normalise audio before processing. NOT TESTED
	public static final boolean MULTITHREADED = true;       // whether to attempt feature extraction with multiple-core exploitation
	public static final int PARALELLISM = 4;                // see above: default number of threads to try (decremented upon failure)
	
	// ------------------------------------------------------------------
	
	/*
	 * Things which are probably fixed
	 */
	
	public static final int JAUDIO_FEATURE_COUNT = 138; // #features in default list generated by features.xml
	public static final int FEATURES = 39; // 11 + 13 + 10 + 5 (last 3 are compound feature vectors which get linearised into array)
	public static final String featureXMLLocation = "features.xml";
	public static final int TEMP_FILE_NAME_LENGTH = 10;

	// ------------------------------------------------------------------
	
	/*
	 * Debug
	 */
	
	public static final boolean DEBUG_LOAD_FEATURES_FILE = false; // whether to load features from disk rather than scanning
	public static final boolean DEBUG_SAVE_FEATURES = false;      // whether to save features to disk separately
	public static final boolean DEBUG_SAVE_CLUSTERS = false;      // whether to save clusters to disk separately
	public static final String FEATURES_PATH = "\\Music Factory\\features.ser"; // location for the above
	public static final String CLUSTERS_PATH = "\\Music Factory\\clusters.ser"; // location for the above
	public static final boolean CUSTOM_FEATUREPROC_CODE = false;  // whether to use the tweaked code which avoid errors but produces different results in feature extraction
	
}
